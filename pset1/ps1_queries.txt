/* 
 * CSCI E-66: Problem Set 1, SQL Programming Problems
 *
 * Put your name and email address below:
 *     name: David Kalish
 *     email: davidpkalish@gmail.com
 */

/**********************************************************
 * REMEMBER: You should include only the SQL commands,
 * *NOT* the results that they produce.
 **********************************************************/

/*
 * sample query: Find the names and runtimes of all 
 * movies from the year 2000.
 */

SELECT name, runtime
FROM Movie
WHERE year = 2000;


/*
 * Problem 5. Put your SQL command for this problem below.	
 */
SELECT name, year
FROM Movie
WHERE name LIKE '%lady%';



/*
 * Problem 6. Put your SQL command for this problem below.	
 */


SELECT COUNT(DISTINCT Person.name)
FROM Person, Movie, Oscar, (SELECT Actor.actor_id, Actor.movie_id
    FROM Actor
    UNION
    SELECT Director.director_id, Director.movie_id
    FROM Director) AS actDir
WHERE Person.pob LIKE '%uk'
    AND Movie.id = actDir.movie_id
    AND Person.id = actDir.actor_id
    AND Oscar.movie_id = Movie.id
    AND Oscar.person_id = Person.id;


/*
 * Problem 7. Put your SQL command for this problem below.	
 */
SELECT Oscar.year, Oscar.type, Movie.name
FROM Person, Movie, Actor, Oscar
WHERE Person.name = 'Meryl Streep'
    AND Movie.id = Actor.movie_id
    AND Person.id = Actor.actor_id
    AND Oscar.movie_id = Movie.id
    AND Oscar.person_id = Person.id;



/*
 * Problem 8. Put your SQL command for this problem below.	
 */
SELECT Movie.name, Movie.year
FROM Movie
WHERE Movie.name = 'Good Will Hunting'
    OR Movie.name = 'Mystic River';
    


/*
 * Problem 9. Put your SQL command for this problem below.	
 */
SELECT Movie.name, Movie.year, Movie.rating
FROM Movie
WHERE Movie.rating = 'R'
    AND Movie.year = (
        SELECT MIN(Movie.year)
        FROM Movie
        WHERE Movie.rating = 'R'
    );
    


/*
 * Problem 10. Put your SQL command for this problem below.	
 */
SELECT COUNT(*), topMovies.rating, MIN(topMovies.earnings_rank)
FROM (SELECT Movie.name, Movie.rating, Movie.earnings_rank
    FROM Movie
    WHERE Movie.earnings_rank <= 200) AS topMovies
GROUP BY topMovies.rating
ORDER BY COUNT(*) ASC;


/*
 * Problem 11. Put your SQL command for this problem below.	
 */
SELECT pob, COUNT(*)
FROM Person
WHERE pob is not null
GROUP BY pob
HAVING count(*) >=50;


/*
 * Problem 12. Put your SQL command for this problem below.	
 */
SELECT Person.name, movie.year
FROM Person, Movie, Actor
WHERE Actor.actor_id = Person.id
    AND Actor.movie_id = Movie.id
    AND Movie.year < 2010
    AND Person.id NOT IN (
        SELECT DISTINCT Person.id
        FROM Actor, Person, Movie
        WHERE Actor.actor_id = Person.id
            AND Actor.movie_id = Movie.id
            AND Movie.year >= 2010
    );



/*
 * Problem 13. Put your SQL command for this problem below.	
 */
SELECT Person.name, COUNT(Oscar.person_id)
FROM Person, Oscar, Movie, (SELECT Actor.actor_id, Actor.movie_id
    FROM Actor
    UNION
    SELECT Director.director_id, Director.movie_id
    FROM Director) AS actDir
WHERE Person.pob LIKE '%mexico'
    AND Person.id = actDir.actor_id
    AND Movie.id = actDir.movie_id
    AND Oscar.person_id = Person.id
GROUP BY Oscar.person_id;


/*
 * Problem 14. Put your SQL command for this problem below.	
 */
SELECT Oscar.type, AVG(Movie.runtime)
FROM Movie, Oscar
WHERE Oscar.movie_id = Movie.id
GROUP BY Oscar.type;


/*
 * Problem 15. Put your SQL command for this problem below.	
 */
SELECT Movie.name, MIN(Movie.runtime)
FROM Movie
UNION
SELECT Movie.name, MAX(Movie.runtime)
FROM Movie;


/*
 * Problem 16. Put your SQL command for this problem below.	
 */
UPDATE Movie
SET rating = "PG-13"
WHERE name = "Indiana Jones and the Temple of Doom";


/*
 * Problem 17 (required for grad-credit students; optional for others). 
 * Put your SQL command for this problem below.	
 */
SELECT COUNT(*)
FROM (SELECT pAct.name
    FROM Person as pAct, Person as pDir, Movie, Actor, Director
    WHERE pAct.id = Actor.actor_id
        AND Movie.id = Actor.movie_id
        AND pDir.id = Director.director_id
        AND Movie.id = Director.movie_id
    GROUP BY pAct.id
    HAVING COUNT(pDir.id) > 2) as twoDir;



/*
 * Problem 18 (required for grad-credit students; optional for others). 
 * Put your SQL command(s) for this problem below.	
 */
SELECT DISTINCT spielbergMovie.name, Oscar.type
FROM (SELECT Movie.*
    FROM Person, Movie, Director
    WHERE Person.name = "Steven Spielberg"
        AND Director.director_id = Person.id
        AND Director.movie_id = Movie.id
    ) AS spielbergMovie LEFT OUTER JOIN Oscar on spielbergMovie.id = Oscar.movie_id;

